// <auto-generated />
using System;
using DevMatch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevMatch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524033214_db_inicial")]
    partial class db_inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevMatch.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMensagens");
                });

            modelBuilder.Entity("DevMatch.Models.MentorProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("UserId");

                    b.ToTable("MentorProfile");
                });

            modelBuilder.Entity("DevMatch.Models.Rating", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.ToTable("Ratings", t =>
                        {
                            t.HasCheckConstraint("CK_1_5", "[Nota] >= 1 AND [Nota] <= 5");
                        });
                });

            modelBuilder.Entity("DevMatch.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("MentoradoId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Topico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("MentoradoId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DevMatch.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DevMatch.Models.ChatMessage", b =>
                {
                    b.HasOne("DevMatch.Models.User", "Sender")
                        .WithMany("MensagensEnviadas")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevMatch.Models.Session", "Session")
                        .WithMany("Mensagens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DevMatch.Models.MentorProfile", b =>
                {
                    b.HasOne("DevMatch.Models.User", "User")
                        .WithOne("MentorProfile")
                        .HasForeignKey("DevMatch.Models.MentorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevMatch.Models.Rating", b =>
                {
                    b.HasOne("DevMatch.Models.Session", "Session")
                        .WithOne("Rating")
                        .HasForeignKey("DevMatch.Models.Rating", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DevMatch.Models.Session", b =>
                {
                    b.HasOne("DevMatch.Models.User", "Mentor")
                        .WithMany("SessionsComoMentor")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevMatch.Models.User", "Mentorado")
                        .WithMany("SessionsComoMentorado")
                        .HasForeignKey("MentoradoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Mentorado");
                });

            modelBuilder.Entity("DevMatch.Models.Session", b =>
                {
                    b.Navigation("Mensagens");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("DevMatch.Models.User", b =>
                {
                    b.Navigation("MensagensEnviadas");

                    b.Navigation("MentorProfile");

                    b.Navigation("SessionsComoMentor");

                    b.Navigation("SessionsComoMentorado");
                });
#pragma warning restore 612, 618
        }
    }
}
